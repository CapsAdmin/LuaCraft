--[[
	Please do not edit this file, it will get updated on startup
	If you want a function to be added here, post it on the forums
	
	Thanks!
]]

function string.ToTable(str)
	local tbl = {}
	
	for i=1, string.len(str) do
		tbl[i] = string.sub(str, i, i)
	end
	
	return tbl
end

function string.Explode(str, sep, pat)
	if (sep == "") then return string.ToTable(str) end
	
	local ret = {}
	local i, pos = 1, 1
	
	if not pat then sep = string.gsub(sep, "[%-%^%$%(%)%%%.%[%]%*%+%-%?]", "%%%1") end
	
	for startpos, endpos in string.gmatch(str, "()"..sep.."()") do
		ret[i] = string.sub(str, pos, startpos - 1)
		i = i + 1
		pos = endpos
	end
	
	ret[i] = string.sub(str, pos)
	return ret
end

-- With special chars: 33-126
-- without: 48-57, 65-90, 97-122 (this is going to be a bit messy without continue)
local tab = {}
local num = 0 --recycling these up here since they get called a lot
local numroll
numroll = function()
    num = math.random(48, 122)
    if (num > 57 and num < 65) or (num > 90 and num < 97) then
        return numroll()
    else
        return num
    end
end
function string.Random(len, specialchars)
        tab = {}
    if specialchars then
        for i=1, len do
            table.insert(tab, string.char(math.random(33, 126)))
        end
        return table.concat(tab)
    else
        for i=1, len do
            table.insert(tab, string.char(numroll()))
        end
        return table.concat(tab)
    end
end

function string.Trim(str, char)
	char = char or "%s"
	return string.gsub(str, "^" .. char .. "*(.-)" .. char .. "*$", "%1")
end

function string.TrimRight(str, char)
    char = char or " "
    
    if string.sub(str, -1) == char then
        str = string.sub(str, 0, -2)
        str = string.TrimRight(str, char)
    end
    
    return str
end

function string.TrimLeft(str, char)
    char = char or " "
    
    if string.sub(str, 1) == char then
        str = string.sub(str, 1)
        str = string.TrimLeft(str, char)
    end
    
    return str
end

function string.NiceSize( size )

	if ( size < 1024 ) then return size .. " Bytes" end
	if ( size < 1024 * 1024 ) then return math.Round( size / 1024, 2 ) .. " KB" end
	if ( size < 1024 * 1024 * 1024 ) then return math.Round( size / (1024*1024), 2 ) .. " MB" end

	return math.Round( size / (1024*1024*1024), 2 ) .. " GB"

end